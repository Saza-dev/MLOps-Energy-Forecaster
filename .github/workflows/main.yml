name: CI/CD for Energy Prediction API

# Trigger: Run this workflow on every push to the 'main' branch
on:
  push:
    branches: [ main ]

# Environment Variables:
env:
  AWS_REGION: us-east-1                  
  ECR_REPOSITORY: energy-predictor-api   
  APP_RUNNER_SERVICE_ARN: arn:aws:apprunner:us-east-1:540384223356:service/energy_forecaster/40cb9ab75cf844c0a2fe9a8843c603e0

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
    # Checkout Code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Python for testing
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Install test dependencies
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx

    # Run Tests (CI Step)
    - name: Run tests with pytest
      run: |
        export PYTHONPATH=.
        pytest

    # Configure AWS Credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Log in to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Build, Tag, and Push Docker Image to ECR
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }} # Use the commit SHA as a unique image tag
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Deploy to AWS App Runner
    - name: Deploy new image to AWS App Runner
      run: aws apprunner start-deployment --service-arn ${{ env.APP_RUNNER_SERVICE_ARN }} --source-configuration "{\"ImageRepository\": {\"ImageIdentifier\": \"${{ steps.build-image.outputs.image }}\", \"ImageRepositoryType\": \"ECR\"}}"

